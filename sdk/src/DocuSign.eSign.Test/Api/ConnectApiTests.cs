/* 
 * DocuSign REST API
 *
 * The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.
 *
 * OpenAPI spec version: v2
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using DocuSign.eSign.Client;
using DocuSign.eSign.Api;
using DocuSign.eSign.Model;

namespace DocuSign.eSign.Test
{
    /// <summary>
    ///  Class for testing ConnectApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [NUnit.Framework.TestFixtureAttribute]
    public class ConnectApiTests
    {
        private ConnectApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [NUnit.Framework.SetUpAttribute]
        public void Init()
        {
            instance = new ConnectApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ConnectApi
        /// </summary>
        [NUnit.Framework.TestAttribute]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' ConnectApi
            //NUnit.Framework.Assert.IsInstanceOf(typeof(ConnectApi), instance, "instance is a ConnectApi");
        }

        
        /// <summary>
        /// Test CreateConfiguration
        /// </summary>
        [NUnit.Framework.TestAttribute]
        public void CreateConfigurationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ConnectCustomConfiguration connectCustomConfiguration = null;
            //string accountId = null;
            //var response = instance.CreateConfiguration(connectCustomConfiguration, accountId);
            //NUnit.Framework.Assert.IsInstanceOf<ConnectCustomConfiguration> (response, "response is ConnectCustomConfiguration");
        }
        
        /// <summary>
        /// Test DeleteConfiguration
        /// </summary>
        [NUnit.Framework.TestAttribute]
        public void DeleteConfigurationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string connectId = null;
            //instance.DeleteConfiguration(accountId, connectId);
            
        }
        
        /// <summary>
        /// Test DeleteEventFailureLog
        /// </summary>
        [NUnit.Framework.TestAttribute]
        public void DeleteEventFailureLogTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string failureId = null;
            //instance.DeleteEventFailureLog(accountId, failureId);
            
        }
        
        /// <summary>
        /// Test DeleteEventLog
        /// </summary>
        [NUnit.Framework.TestAttribute]
        public void DeleteEventLogTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string logId = null;
            //instance.DeleteEventLog(accountId, logId);
            
        }
        
        /// <summary>
        /// Test DeleteEventLogs
        /// </summary>
        [NUnit.Framework.TestAttribute]
        public void DeleteEventLogsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //instance.DeleteEventLogs(accountId);
            
        }
        
        /// <summary>
        /// Test DeleteMobileNotifiers
        /// </summary>
        [NUnit.Framework.TestAttribute]
        public void DeleteMobileNotifiersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //MobileNotifierConfigurationInformation mobileNotifierConfigurationInformation = null;
            //string accountId = null;
            //var response = instance.DeleteMobileNotifiers(mobileNotifierConfigurationInformation, accountId);
            //NUnit.Framework.Assert.IsInstanceOf<MobileNotifierConfigurationInformation> (response, "response is MobileNotifierConfigurationInformation");
        }
        
        /// <summary>
        /// Test GetConfiguration
        /// </summary>
        [NUnit.Framework.TestAttribute]
        public void GetConfigurationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string connectId = null;
            //var response = instance.GetConfiguration(accountId, connectId);
            //NUnit.Framework.Assert.IsInstanceOf<ConnectConfigResults> (response, "response is ConnectConfigResults");
        }
        
        /// <summary>
        /// Test GetEventLog
        /// </summary>
        [NUnit.Framework.TestAttribute]
        public void GetEventLogTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string additionalInfo = null;
            //string accountId = null;
            //string logId = null;
            //var response = instance.GetEventLog(additionalInfo, accountId, logId);
            //NUnit.Framework.Assert.IsInstanceOf<ConnectLog> (response, "response is ConnectLog");
        }
        
        /// <summary>
        /// Test ListConfigurations
        /// </summary>
        [NUnit.Framework.TestAttribute]
        public void ListConfigurationsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //var response = instance.ListConfigurations(accountId);
            //NUnit.Framework.Assert.IsInstanceOf<ConnectConfigResults> (response, "response is ConnectConfigResults");
        }
        
        /// <summary>
        /// Test ListEventFailureLogs
        /// </summary>
        [NUnit.Framework.TestAttribute]
        public void ListEventFailureLogsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fromDate = null;
            //string toDate = null;
            //string accountId = null;
            //var response = instance.ListEventFailureLogs(fromDate, toDate, accountId);
            //NUnit.Framework.Assert.IsInstanceOf<ConnectLogs> (response, "response is ConnectLogs");
        }
        
        /// <summary>
        /// Test ListEventLogs
        /// </summary>
        [NUnit.Framework.TestAttribute]
        public void ListEventLogsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fromDate = null;
            //string toDate = null;
            //string accountId = null;
            //var response = instance.ListEventLogs(fromDate, toDate, accountId);
            //NUnit.Framework.Assert.IsInstanceOf<ConnectLogs> (response, "response is ConnectLogs");
        }
        
        /// <summary>
        /// Test ListMobileNotifiers
        /// </summary>
        [NUnit.Framework.TestAttribute]
        public void ListMobileNotifiersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //var response = instance.ListMobileNotifiers(accountId);
            //NUnit.Framework.Assert.IsInstanceOf<MobileNotifierConfigurationInformation> (response, "response is MobileNotifierConfigurationInformation");
        }
        
        /// <summary>
        /// Test ListUsers
        /// </summary>
        [NUnit.Framework.TestAttribute]
        public void ListUsersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string count = null;
            //string emailSubstring = null;
            //string listIncludedUsers = null;
            //string startPosition = null;
            //string status = null;
            //string userNameSubstring = null;
            //string accountId = null;
            //string connectId = null;
            //var response = instance.ListUsers(count, emailSubstring, listIncludedUsers, startPosition, status, userNameSubstring, accountId, connectId);
            //NUnit.Framework.Assert.IsInstanceOf<IntegratedUserInfoList> (response, "response is IntegratedUserInfoList");
        }
        
        /// <summary>
        /// Test RetryEventForEnvelope
        /// </summary>
        [NUnit.Framework.TestAttribute]
        public void RetryEventForEnvelopeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string envelopeId = null;
            //var response = instance.RetryEventForEnvelope(accountId, envelopeId);
            //NUnit.Framework.Assert.IsInstanceOf<ConnectFailureResults> (response, "response is ConnectFailureResults");
        }
        
        /// <summary>
        /// Test RetryEventForEnvelopes
        /// </summary>
        [NUnit.Framework.TestAttribute]
        public void RetryEventForEnvelopesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ConnectFailureFilter connectFailureFilter = null;
            //string accountId = null;
            //var response = instance.RetryEventForEnvelopes(connectFailureFilter, accountId);
            //NUnit.Framework.Assert.IsInstanceOf<ConnectFailureResults> (response, "response is ConnectFailureResults");
        }
        
        /// <summary>
        /// Test UpdateConfiguration
        /// </summary>
        [NUnit.Framework.TestAttribute]
        public void UpdateConfigurationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ConnectCustomConfiguration connectCustomConfiguration = null;
            //string accountId = null;
            //var response = instance.UpdateConfiguration(connectCustomConfiguration, accountId);
            //NUnit.Framework.Assert.IsInstanceOf<ConnectCustomConfiguration> (response, "response is ConnectCustomConfiguration");
        }
        
        /// <summary>
        /// Test UpdateMobileNotifiers
        /// </summary>
        [NUnit.Framework.TestAttribute]
        public void UpdateMobileNotifiersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //MobileNotifierConfigurationInformation mobileNotifierConfigurationInformation = null;
            //string accountId = null;
            //var response = instance.UpdateMobileNotifiers(mobileNotifierConfigurationInformation, accountId);
            //NUnit.Framework.Assert.IsInstanceOf<MobileNotifierConfigurationInformation> (response, "response is MobileNotifierConfigurationInformation");
        }
        
    }

}
